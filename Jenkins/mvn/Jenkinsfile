pipeline {
    agent {
        label 'ecs_fargate_slaves_default'
    }

    environment {
        TEST_IMAGE_VERSION = 'test-simple-$(date +%s)' // Unique tag for each run
        ECR_REPO_NAME = 'simple-test-image-from-pipeline' // New repo name for this test image
        AWS_REGION = 'us-east-1'
    }

    stages {
        stage('Build and Push Simple Test Image with Kaniko') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'AWS_CREDENTIALS_ID',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {

                        def registry = sh(
                            script: """
                                aws sts get-caller-identity --query Account --output text
                            """, returnStdout: true
                        ).trim()
                        env.ECR_REGISTRY = "${registry}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        echo "ðŸ”‘ Authenticated to ${env.ECR_REGISTRY}"

                        // Define a temporary directory for our Dockerfile and context
                        def tempBuildDir = 'kaniko-temp-build'
                        sh "mkdir -p ${tempBuildDir}"

                        // Generate a simple Dockerfile directly within the pipeline
                        // This Dockerfile uses 'alpine' as a base, which is tiny and has basic commands
                        sh """
                            echo 'FROM alpine:latest' > "${tempBuildDir}/Dockerfile"
                            echo 'WORKDIR /test' >> "${tempBuildDir}/Dockerfile"
                            echo 'RUN echo "Hello from test image build!" > /test/hello.txt' >> "${tempBuildDir}/Dockerfile"
                            echo 'CMD ["sh", "-c", "echo \"Container started\"; ls -l /; sleep 10; cat /test/hello.txt; echo \"Container stopping.\""]' >> "${tempBuildDir}/Dockerfile"
                            echo "Generated Dockerfile content:"
                            cat "${tempBuildDir}/Dockerfile"
                        """

                        dir("${tempBuildDir}") { // Change directory into the temp build context
                            echo "ðŸš€ Starting Kaniko build for simple test image"
                            echo "Building image: ${ECR_REGISTRY}/${ECR_REPO_NAME}:${TEST_IMAGE_VERSION}"

                            sh '''
                            /kaniko/executor \
                                --context=dir://$(pwd)/ \
                                --dockerfile=$(pwd)/Dockerfile \
                                --destination=${ECR_REGISTRY}/${ECR_REPO_NAME}:${TEST_IMAGE_VERSION} \
                                --cache=false \
                                --verbosity=info
                            '''

                            echo "âœ… Kaniko build and push complete for simple test image"
                            echo "Image pushed: ${ECR_REGISTRY}/${ECR_REPO_NAME}:${TEST_IMAGE_VERSION}"
                        }
                    }
                }
            }
        }
    }
}