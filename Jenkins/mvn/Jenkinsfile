pipeline {
    agent {
        label 'ecs_fargate_slaves_default'
    }

    environment {
        ENVIRONMENT = 'main'
        VERSION = '1.0.1'
        ECR_REPO_NAME = 'app-book'
        AWS_REGION = 'us-east-1'
        APP_DIR = 'app-mvn'
    }

    stages {

        stage('Build and Push with Kaniko - TEST') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'AWS_CREDENTIALS_ID',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {

                        def registry = sh(
                            script: """
                                aws sts get-caller-identity --query Account --output text
                            """, returnStdout: true
                        ).trim()
                        env.ECR_REGISTRY = "${registry}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        echo "üîë Authenticated to ${env.ECR_REGISTRY}"
                        def tempBuildDir = 'kaniko-temp-build'
                        sh "mkdir ${tempBuildDir}"
                        sh """
                            echo 'FROM alpine:latest' > "${tempBuildDir}/Dockerfile"
                            echo 'WORKDIR /app' >> "${tempBuildDir}/Dockerfile"
                            echo 'RUN echo "Fake Java app" > app.log' >> "${tempBuildDir}/Dockerfile"
                            echo '#CMD ["java", "-jar", "app.jar"]' >> "${tempBuildDir}/Dockerfile"
                            echo 'RUN echo "Finalizing image" && true' >> "${tempBuildDir}/Dockerfile"
                            echo "Generated Dockerfile content:"
                            cat "${tempBuildDir}/Dockerfile"
                        """
                        dir("${tempBuildDir}") {
                            echo "üöÄ Starting Kaniko build"

                            sh '''
                            /kaniko/executor \
                                --context=dir://$(pwd)/ \
                                --dockerfile=$(pwd)/Dockerfile \
                                --destination=${ECR_REGISTRY}/${ECR_REPO_NAME}:${VERSION} \
                                --cache=false \
                                --verbosity=info
                            '''

                            echo "‚úÖ Kaniko build complete"
                        }
                        // dir("${tempBuildDir}") {
                        //     writeFile file: 'run-kaniko.sh', text: '''
                        //     #!/busybox/sh
                        //     set -ex

                        //     /kaniko/executor \
                        //     --context=dir://$(pwd)/ \
                        //     --dockerfile=$(pwd)/Dockerfile \
                        //     --destination=${ECR_REGISTRY}/${ECR_REPO_NAME}:${VERSION} \
                        //     --cache=false \
                        //     --verbosity=info > kaniko.log 2>&1 &

                        //     KANIKO_PID=$!

                        //     # Stream logs so Jenkins doesn't think it's idle/stuck
                        //     tail -f kaniko.log &
                        //     TAIL_PID=$!

                        //     # Wait for Kaniko to finish
                        //     wait $KANIKO_PID
                        //     KANIKO_EXIT=$?

                        //     # Kill tail process
                        //     kill $TAIL_PID || true

                        //     echo "‚úÖ Kaniko exited with code $KANIKO_EXIT"
                        //     exit $KANIKO_EXIT

                        //     '''
                        //     sh 'chmod +x run-kaniko.sh'
                        //     def status = sh(script: './run-kaniko.sh', returnStatus: true)
                        //     if (status != 0) {
                        //         error "‚ùå Kaniko build failed with status ${status}"
                        //     } else {
                        //         echo "‚úÖ Kaniko script completed with status ${status}"
                        //     }

                        // }

                    }
                }
            }
        }
    }
}
