pipeline {
    agent {
        label 'ecs_fargate_slaves_default'
    }

    environment {
        ENVIRONMENT = 'main'
        VERSION = '1.0.1'
        ECR_REPO_NAME = 'app-book'
        AWS_REGION = 'us-east-1'
        APP_DIR = 'app-mvn'
    }

    stages {

        stage('Detect Branch') {
            steps {
                script {
                    sh 'printenv'

                    def branchName = env.GIT_BRANCH?.trim()
                    if (!branchName) {
                        def detectedBranch = sh(
                            script: "git branch -r --contains ${env.GIT_COMMIT} | sed 's| *origin/||'",
                            returnStdout: true
                        ).trim()
                        if (detectedBranch) {
                            ENVIRONMENT = detectedBranch
                            echo "✔ Detected branch: ${ENVIRONMENT}"
                        } else {
                            error "❌ Commit ${env.GIT_COMMIT} not found in any branch."
                        }
                    } else {
                        ENVIRONMENT = sh(
                            script: "echo ${env.GIT_BRANCH} | sed 's| *origin/||'",
                            returnStdout: true
                        ).trim()
                        echo "✔ Detected branch (GIT_BRANCH available): ${ENVIRONMENT}"
                    }
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir("${APP_DIR}") {
                    echo "📦 Installing Maven dependencies in ${APP_DIR}"
                    sh 'mvn clean install'
                }
            }
        }

        stage('Build and Push with Kaniko') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'AWS_CREDENTIALS_ID',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {

                        def registry = sh(
                            script: """
                                aws sts get-caller-identity --query Account --output text
                            """, returnStdout: true
                        ).trim()
                        env.ECR_REGISTRY = "${registry}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        echo "🔑 Authenticated to ${env.ECR_REGISTRY}"
                        def tempBuildDir = 'kaniko-temp-build'
                        sh "mkdir ${tempBuildDir}"
                        sh """
                            echo 'FROM alpine:latest' > "${tempBuildDir}/Dockerfile"
                            echo 'WORKDIR /test' >> "${tempBuildDir}/Dockerfile"
                            echo 'RUN echo "Hello from test image build!" > /test/hello.txt' >> "${tempBuildDir}/Dockerfile"
                            echo 'CMD ["sh", "-c", "echo \"Container started\"; ls -l /; sleep 10; cat /test/hello.txt; echo \"Container stopping.\""]' >> "${tempBuildDir}/Dockerfile"
                            echo "Generated Dockerfile content:"
                            cat "${tempBuildDir}/Dockerfile"
                        """
                        dir("${tempBuildDir}") {
                            echo "🚀 Starting Kaniko build"

                            sh '''
                            /kaniko/executor \
                                --context=dir://$(pwd)/ \
                                --dockerfile=$(pwd)/Dockerfile \
                                --destination=${ECR_REGISTRY}/${ECR_REPO_NAME}:${VERSION} \
                                --cache=false \
                                --verbosity=info
                            '''

                            echo "✅ Kaniko build complete"
                        }
                    }
                }
            }
        }
    }
}
